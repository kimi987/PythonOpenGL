#version 330 core

struct PointLight {
    vec3 position;
    vec3 color;
    float strength;
};

in vec2 fragmentTexCoord;
in vec3 fragmentPosition;
in vec3 fragmentNormal;

out vec4 color;

uniform sampler2D imageTexture;
uniform PointLight Lights[8];
uniform vec3 cameraPosition;

vec3 calculatePointLight(PointLight light, vec3 fragmentPosition, vec3 fragmentNormal, vec3 baseTex);

void main()
{
    vec3 temp = vec3(0.0);

    vec3 baseTex = texture(imageTexture, fragmentTexCoord).rgb;
    //ambient
    temp += 0.2 * baseTex;

    for (int i = 0; i < 8; i++) {
        temp += calculatePointLight(Lights[i], fragmentPosition, fragmentNormal, baseTex);
    }
    color = vec4(temp, 1.0);
}

vec3 calculatePointLight(PointLight light, vec3 fragmentPosition, vec3 fragmentNormal, vec3 baseTex)
{
    vec3 result = vec3(0.0);
    //vec3 baseTex = texture(imageTexture, fragmentTexCoord).rgb;

    //geometric data
    vec3 fragLight = light.position - fragmentPosition;
    float distance = length(fragLight);
    fragLight = normalize(fragLight); 
    vec3 fragCamera = normalize(cameraPosition - fragmentPosition);
    vec3 halfVec = normalize(fragLight + fragCamera);

    //diffuse
    result += light.color * light.strength * max(0.0, dot(fragmentNormal, fragLight)) / (distance * distance) * baseTex;

    //specular
    result += light.color * light.strength * pow(max(0.0, dot(fragmentNormal, halfVec)), 32) / (distance * distance);

    return result;
}